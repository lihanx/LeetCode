package main

/*
剑指 Offer 10- II. 青蛙跳台阶问题
https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/

一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。
答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。

示例 1：
	输入：n = 2
	输出：2
示例 2：
	输入：n = 7
	输出：21
示例 3：
	输入：n = 0
	输出：1
提示：
	0 <= n <= 100
*/


/*
总结:

这个问题可以有两种思考方式：正向 和 反向
1. 正向
	如果从0阶起始开始思考，那么可以可以认为这是一个简单的动态规划问题，可以尝试创建DP数组，计算出最终的路径数。
	但是这样的话，会发现随着n小幅增大，耗时会急剧上升。这是由于每一步只能前进1或2，导致了大量的计算。
	根据尝试可以发现，结果符合斐波那契数列的特征，随后考虑思路2.
2. 反向
	从到达重点开始考虑，可以写出递推公式，符合斐波那契数列的规则，那么可以直接考虑使用递归或者迭代的方式实现。
	只不过起始条件与斐波那契数列略有区别。
*/
func numWays(n int) int {
    a, b := 1, 1
    for i := 0; i < n; i++ {
    	a, b = b, (a+b)%(1e9+7)
    }
    return a
}